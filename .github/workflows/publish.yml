name: Publish to PyPI

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Verify tag is from main branch
      run: |
        # Get the branch that contains the tag
        BRANCH=$(git branch -r --contains ${{ github.ref }} | grep -E '(origin/main|origin/master)' | head -1)
        if [ -z "$BRANCH" ]; then
          echo "❌ Tag ${{ github.ref }} was not created from main branch"
          echo "This workflow only runs for tags created from the main branch"
          exit 1
        fi
        echo "✅ Tag ${{ github.ref }} was created from main branch"
      if: startsWith(github.ref, 'refs/tags/')

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e .

    - name: Run comprehensive tests
      run: |
        uv run ruff check .
        uv run ruff format --check .
        uv run mypy cardinity/
        uv run pytest --cov --cov-fail-under=90

    - name: Test package building
      run: uv build

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Verify version consistency
      run: |
        # Extract version from tag (remove 'v' prefix)
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Tag version: $TAG_VERSION"

        # Extract version from pyproject.toml
        PYPROJECT_VERSION=$(uv run python -c "import tomllib; f=open('pyproject.toml','rb'); data=tomllib.load(f); print(data['project']['version'])")
        echo "pyproject.toml version: $PYPROJECT_VERSION"

        # Extract version from __init__.py
        INIT_VERSION=$(uv run python -c "from cardinity import __version__; print(__version__)")
        echo "__init__.py version: $INIT_VERSION"

        # Verify all versions match
        if [ "$TAG_VERSION" != "$PYPROJECT_VERSION" ] || [ "$TAG_VERSION" != "$INIT_VERSION" ]; then
          echo "Version mismatch detected!"
          exit 1
        fi
        echo "All versions match: $TAG_VERSION"
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    - name: Build package
      run: uv build

    - name: Verify wheel contents
      run: |
        uv run python -m zipfile -l dist/*.whl
        ls -la dist/

    - name: Test wheel installation
      run: |
        uv venv test-env
        source test-env/bin/activate
        uv pip install dist/*.whl
        python -c "import cardinity; print(f'Successfully imported cardinity v{cardinity.__version__}')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    environment: pypi
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      run: |
        uv publish --token ${{ secrets.PYPI_API_TOKEN }}

    - name: Verify PyPI installation
      run: |
        sleep 120  # Wait for package to be available on PyPI
        uv venv verify-env
        source verify-env/bin/activate

        # Install from PyPI with retries
        for i in {1..5}; do
          if uv pip install cardinity-python; then
            break
          fi
          echo "Attempt $i failed, retrying in 60 seconds..."
          sleep 60
        done

        # Test basic functionality
        python -c "
        import cardinity
        print(f'Successfully installed cardinity-python v{cardinity.__version__} from PyPI')

        # Test basic imports and functionality
        from cardinity import Cardinity, CardinityError, ValidationError
        print('All core imports successful')

        # Test basic SDK initialization (without credentials)
        try:
            sdk = Cardinity('test_key', 'test_secret')
            print('SDK initialization successful')
        except Exception as e:
            print(f'SDK initialization test: {e}')
        "

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      actions: read

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Generate release notes
      id: release_notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

        # Generate release notes from CHANGELOG.md
        if [ -f CHANGELOG.md ]; then
          # Extract changelog section for this version
          awk "/^## \[$VERSION\]/{flag=1;next}/^## \[/{flag=0}flag" CHANGELOG.md > release_notes.md
          if [ -s release_notes.md ]; then
            echo "Found changelog entry for version $VERSION"
          else
            echo "## What's Changed" > release_notes.md
            echo "" >> release_notes.md
            echo "* Release v$VERSION" >> release_notes.md
            echo "" >> release_notes.md
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md" >> release_notes.md
          fi
        else
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          echo "* Release v$VERSION" >> release_notes.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
        body_path: release_notes.md
        name: Release v${{ steps.release_notes.outputs.version }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
