name: Pre-Release Testing

on:
  push:
    tags:
      - 'v*.*.*-rc*'
      - 'v*.*.*-beta*'
      - 'v*.*.*-alpha*'
  workflow_dispatch:

jobs:
  test-release:
    name: Test Release Process
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Verify tag is from main branch
      run: |
        # Get the branch that contains the tag
        BRANCH=$(git branch -r --contains ${{ github.ref }} | grep -E '(origin/main|origin/master)' | head -1)
        if [ -z "$BRANCH" ]; then
          echo "❌ Tag ${{ github.ref }} was not created from main branch"
          echo "This workflow only runs for tags created from the main branch"
          exit 1
        fi
        echo "✅ Tag ${{ github.ref }} was created from main branch"
      if: startsWith(github.ref, 'refs/tags/')

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e .

    - name: Run comprehensive tests
      run: |
        uv run ruff check .
        uv run ruff format --check .
        uv run mypy cardinity/
        uv run pytest --cov --cov-fail-under=85

    - name: Test package building
      run: |
        uv build
        echo "Built packages:"
        ls -la dist/

    - name: Verify package contents
      run: |
        echo "Wheel contents:"
        uv run python -m zipfile -l dist/*.whl
        echo ""
        echo "Tarball contents:"
        tar -tzf dist/*.tar.gz

    - name: Test package installation
      run: |
        # Create fresh environment
        uv venv test-install
        source test-install/bin/activate

        # Install from wheel
        uv pip install dist/*.whl

        # Test import and basic functionality
        python -c "
        import cardinity
        print(f'Successfully imported cardinity v{cardinity.__version__}')

        # Test all major imports
        from cardinity import (
            Cardinity, CardinityError, ValidationError,
            CardinityClient, CardinityAuth
        )
        print('All imports successful')

        # Test SDK initialization
        try:
            sdk = Cardinity('test_key', 'test_secret')
            print('SDK initialization successful')
        except Exception as e:
            print(f'SDK initialization: {e}')
        "

    - name: Test package metadata
      run: |
        uv run python -c "
        import cardinity
        import importlib.metadata

        print(f'Package version: {cardinity.__version__}')

        # Check if package can be found by importlib.metadata
        try:
            dist = importlib.metadata.distribution('cardinity-python')
            print(f'Distribution found: {dist.metadata[\"Name\"]} {dist.version}')
        except Exception as e:
            print(f'Distribution check: {e}')
        "

    - name: Simulate PyPI upload (dry run)
      run: |
        echo "Would upload to PyPI:"
        echo "uv publish --token [HIDDEN]"
        echo ""
        echo "Files to upload:"
        ls -la dist/
        echo ""
        echo "Package metadata:"
        uv run python -c "
        import tomllib
        with open('pyproject.toml', 'rb') as f:
            data = tomllib.load(f)

        project = data['project']
        print(f'Name: {project[\"name\"]}')
        print(f'Version: {project[\"version\"]}')
        print(f'Description: {project[\"description\"]}')
        print(f'Python requires: {project[\"requires-python\"]}')
        print(f'Dependencies: {len(project[\"dependencies\"])} packages')
        "

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-dist-${{ matrix.python-version }}
        path: dist/
        retention-days: 7

  security-check:
    name: Security Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Verify tag is from main branch
      run: |
        # Get the branch that contains the tag
        BRANCH=$(git branch -r --contains ${{ github.ref }} | grep -E '(origin/main|origin/master)' | head -1)
        if [ -z "$BRANCH" ]; then
          echo "❌ Tag ${{ github.ref }} was not created from main branch"
          echo "This workflow only runs for tags created from the main branch"
          exit 1
        fi
        echo "✅ Tag ${{ github.ref }} was created from main branch"
      if: startsWith(github.ref, 'refs/tags/')

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Check for security vulnerabilities
      run: |
        # Install safety for security checking
        uv add --dev safety
        uv run safety check --json || true

        # Check for known vulnerabilities in dependencies
        uv run python -c "
        import subprocess
        import json

        try:
            result = subprocess.run(['uv', 'run', 'safety', 'check', '--json'],
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print('✓ No security vulnerabilities found')
            else:
                print('⚠ Security check completed with warnings')
                print(result.stdout)
        except Exception as e:
            print(f'Security check failed: {e}')
        "

    - name: Verify no secrets in code
      run: |
        echo "Checking for potential secrets..."

        # Check for common secret patterns
        if grep -r -E "(password|secret|key|token|api_key)" --include="*.py" cardinity/ | grep -v "__pycache__" | grep -v ".pyc"; then
          echo "⚠ Found potential secrets in code - please review"
        else
          echo "✓ No obvious secrets found in code"
        fi

        # Check for hardcoded credentials
        if grep -r -E "(consumer_key|consumer_secret)" --include="*.py" cardinity/ | grep -v "test" | grep -v "example"; then
          echo "⚠ Found potential hardcoded credentials"
        else
          echo "✓ No hardcoded credentials found"
        fi
